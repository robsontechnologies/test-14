<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <div class="attendance-roster">
        <template v-for="(groupedAttendances, groupLabel, index) in attendanceGroups" :key="groupLabel">
            <template v-if="groupedAttendances.length">
                <hr v-if="hasMultipleGroups && index > 0" />
                <h2 v-if="groupLabel && hasMultipleGroups">{{ groupLabel }}</h2>
                <div class="attendance-grid">
                    <template v-for="attendance in groupedAttendances" :key="attendance.personGuid">
                        <CardCheckBox
                                      v-if="attendance.itemTemplate"
                                      :controlWrapperClasses="'card-check-box ' + controlWrapperClasses"
                                      :cardCheckBoxClasses="cardCheckBoxClasses"
                                      :disabled="disabled"
                                      :html="attendance.itemTemplate"
                                      :modelValue="attendance.didAttend"
                                      @update:modelValue="onInternalAttendanceChanged($event, attendance)" />
                        <CardCheckBox
                                      v-else
                                      :controlWrapperClasses="'card-check-box ' + controlWrapperClasses"
                                      :cardCheckBoxClasses="cardCheckBoxClasses"
                                      :disabled="disabled"
                                      :modelValue="attendance.didAttend"
                                      @update:modelValue="onInternalAttendanceChanged($event, attendance)">
                            <div>
                                {{ getAttendanceFullName(attendance) }}
                            </div>
                        </CardCheckBox>
                    </template>
                </div>
            </template>
        </template>
    </div>
</template>

<style>
    .attendance-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(220px, 1fr));
        grid-gap: 12px;
    }

    .attendance-roster hr {
        border-top: 5px solid #c8c8c8;
        border-radius: 5px;
        margin: 32px 0;
    }
</style>

<script setup lang="ts">
    import { computed, PropType } from "vue";
    import CardCheckBox from "./cardCheckBox.partial.obs";
    import { AttendanceFilterByDelegate, AttendanceGroupByDelegate, AttendanceSortByDelegate } from "./types.partial";
    import { getAttendanceFullName } from "./utils.partial";
    import { GroupAttendanceDetailAttendanceBag } from "@Obsidian/ViewModels/Blocks/Group/GroupAttendanceDetail/groupAttendanceDetailAttendanceBag";

    const props = defineProps({
        attendances: {
            type: Object as PropType<GroupAttendanceDetailAttendanceBag[]>,
            required: true
        },

        disabled: {
            type: Boolean as PropType<boolean>,
            default: false
        },

        filterBy: {
            type: Object as PropType<AttendanceFilterByDelegate | null>,
            required: false,
            default: null
        },

        groupBy: {
            type: Object as PropType<AttendanceGroupByDelegate | null>,
            required: false,
            default: null
        },

        sortBy: {
            type: Object as PropType<AttendanceSortByDelegate | null>,
            required: false,
            default: null
        },

        /**
         * If `true`, will not group attendances.
         */
        isLongListDisabled: {
            type: Boolean as PropType<boolean>,
            required: false,
            default: false
        }
    });

    const emit = defineEmits<{
        /**
         * Emitted when attendance is changed by checking/unchecking an entry on the roster.
         * Does not emit if attendance.didAttend is changed somewhere else.
         */
        (e: "attendanceChanged", value: GroupAttendanceDetailAttendanceBag): void
    }>();

    const controlWrapperClasses = "";
    const cardCheckBoxClasses = "";

    //#region Computed Values

    /**
     * Returns the sorted attendances if a "sort by" delegate is specified; otherwise, a copy of the attendances are returned without sorting.
     */
    const sortedAttendances = computed<GroupAttendanceDetailAttendanceBag[]>(() => {
        const sortByDelegate = props.sortBy;

        const attendances = [...props.attendances];

        if (sortByDelegate) {
            attendances.sort(sortByDelegate);
        }

        return attendances;
    });

    /**
     *  Returns the filtered, sorted attendances if a "filter by" delegate is specified; otherwise, the sorted attendances are returned without filtering.
     *  We want to filter after sorting since filtering happens more often than sorting. If we filtered first, then any time the filter changed, we'd have to also re-sort.
     *  */
    const filteredAttendances = computed<GroupAttendanceDetailAttendanceBag[]>(() => {
        const filterByDelegate = props.filterBy;
        const attendances = sortedAttendances.value;

        if (!filterByDelegate) {
            return attendances;
        }

        return attendances.filter(filterByDelegate);
    });

    /**
     * Returns the sorted and filtered attendances into groups if a "group by" delegate is specified; otherwise, a single group of attendances with a blank key is returned.
     */
    const attendanceGroups = computed<Record<string, GroupAttendanceDetailAttendanceBag[]>>(() => {
        const groupBy = props.groupBy;
        const attendances = filteredAttendances.value;

        const shouldGroup = groupBy && !props.isLongListDisabled;

        if (!shouldGroup) {
            return { "": attendances };
        }

        const dictionary: Record<string, GroupAttendanceDetailAttendanceBag[]> = {};

        const keys: string[] = [];

        attendances.forEach((attendance) => {
            const groupLabel = groupBy(attendance);

            if (!dictionary[groupLabel]) {
                dictionary[groupLabel] = [attendance];
                keys.push(groupLabel);
            }
            else {
                dictionary[groupLabel].push(attendance);
            }
        });

        keys.sort();

        const sortedDictionary: Record<string, GroupAttendanceDetailAttendanceBag[]> = {};
        keys.forEach(key => sortedDictionary[key] = dictionary[key]);
        return sortedDictionary;
    });

    const hasMultipleGroups = computed<boolean>(() => Object.keys(attendanceGroups.value).length > 1);

    //#endregion

    //#region Event Handlers

    function onInternalAttendanceChanged(didAttend: boolean, attendance: GroupAttendanceDetailAttendanceBag): void {
        const changed = attendance.didAttend !== didAttend;
        attendance.didAttend = didAttend;

        if (changed) {
            emit("attendanceChanged", attendance);
        }
    }

    //#endregion
</script>
