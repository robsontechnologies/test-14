//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Rock.CodeGeneration project
//     Changes to this file will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// <copyright>
// Copyright by the Spark Development Network
//
// Licensed under the Rock Community License (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.rockrms.com/license
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// </copyright>
//

/** For Attendance Reporting, graph into series partitioned by Total, Group, Campus, or Schedule */
export const AttendanceGraphBy = {
    /** Total (one series) */
    Total: 0,

    /** Each selected Check-in Group (which is actually a [Group] under the covers) is a series */
    Group: 1,

    /** Each campus (from Attendance.CampusId) is its own series */
    Campus: 2,

    /** Each schedule (from Attendance.ScheduleId) is its own series */
    Schedule: 3,

    /** Each Location (from Attendance.LocationId) is its own series */
    Location: 4
} as const;

/** For Attendance Reporting, graph into series partitioned by Total, Group, Campus, or Schedule */
export const AttendanceGraphByDescription: Record<number, string> = {
    0: "Total",

    1: "Group",

    2: "Campus",

    3: "Schedule",

    4: "Location"
};

/** For Attendance Reporting, graph into series partitioned by Total, Group, Campus, or Schedule */
export type AttendanceGraphBy = typeof AttendanceGraphBy[keyof typeof AttendanceGraphBy];
