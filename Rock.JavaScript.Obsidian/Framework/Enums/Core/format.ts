//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Rock.CodeGeneration project
//     Changes to this file will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// <copyright>
// Copyright by the Spark Development Network
//
// Licensed under the Rock Community License (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.rockrms.com/license
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// </copyright>
//

/** Represents the preferred format of the binary file type. */
export const Format = {
    /** The undefined. */
    Undefined: -1,

    /** The preferred format is as a .JPG file. */
    JPG: 0,

    /** The preferred format is as a .GIF file. */
    GIF: 1,

    /** The preferred format is as a .PNG file. */
    PNG: 2,

    /** The preferred format is as a .PDF file. */
    PDF: 3,

    /** The preferred format is as a Word document. */
    Word: 4,

    /** The preferred format is as an Excel document. */
    Excel: 5,

    /** The preferred format is as a text file. */
    Text: 6,

    /** The preferred format is as an HTML document. */
    HTML: 7
} as const;

/** Represents the preferred format of the binary file type. */
export const FormatDescription: Record<number, string> = {
    [-1]: "Undefined",

    0: "JPG",

    1: "GIF",

    2: "PNG",

    3: "PDF",

    4: "Word",

    5: "Excel",

    6: "Text",

    7: "HTML"
};

/** Represents the preferred format of the binary file type. */
export type Format = typeof Format[keyof typeof Format];
