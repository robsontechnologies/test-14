//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Rock.CodeGeneration project
//     Changes to this file will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// <copyright>
// Copyright by the Spark Development Network
//
// Licensed under the Rock Community License (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.rockrms.com/license
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// </copyright>
//

/** Type of Filter entry */
export const FilterExpressionType = {
    /** Expression filter */
    Filter: 0,

    /** A collection of expressions/conditions that must match and should be "and'd" together. */
    GroupAll: 1,

    /** A collection of expressions/conditions where at least one condition/expression must match.  Expressions are "or'd" together. */
    GroupAny: 2,

    /** A collection of expressions/conditions where all conditions must be false.  Expressions are combined using a logical OR and the group result must be FALSE. */
    GroupAllFalse: 3,

    /** A collection of expressions/conditions where at least one condition must be false.  Expressions are combined using a logical AND and the group result must be FALSE. */
    GroupAnyFalse: 4
} as const;

/** Type of Filter entry */
export const FilterExpressionTypeDescription: Record<number, string> = {
    0: "Filter",

    1: "Group All",

    2: "Group Any",

    3: "Group All False",

    4: "Group Any False"
};

/** Type of Filter entry */
export type FilterExpressionType = typeof FilterExpressionType[keyof typeof FilterExpressionType];
